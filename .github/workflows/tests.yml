name: Tests

on:
  push:
    branches: [ master ]
    paths-ignore: [ 'dist/*.js' ]
  pull_request:
    branches: [ master ]

jobs:
  deploy-action-code:
    if: github.event_name == 'push'
    name: Deploy Action Code
    runs-on: ubuntu-latest
    steps:
      - name: Install dependencies
        run: sudo npm i -g typescript @vercel/ncc
      - uses: actions/checkout@v3.0.2
        with:
          token: ${{secrets.BOT_TOKEN}}
      - name: Generate action code
        run: npm run deploy
      - name: Configure repository
        run: |
          git config user.name '${{secrets.BOT_USERNAME}}'
          git config user.email '${{secrets.BOT_USERNAME}}@users.noreply.github.com'
      - name: Commit changes
        run: |
          if ! git diff --exit-code --quiet; then
            git add .
            git commit -m '[AUTO] Update generated code'
            git push
          fi

  test-spm:
    needs: deploy-action-code
    if: always() && !failure() && !cancelled()
    name: Test using SPM
    strategy:
      matrix:
        os: [ macos-latest, ubuntu-latest ]
    env:
      INPUT_PACKAGE_PATH: __test__/TestProject
      INPUT_PACKAGE_VERSION: 1.0.0
      INPUT_OUTPUT: docs
    runs-on: ${{matrix.os}}
    steps:
      - uses: swift-actions/setup-swift@v1.16.0
        with:
          swift-version: '5.6'
      - name: Install dependencies
        if: github.event_name == 'pull_request'
        run: sudo npm i -g typescript @vercel/ncc
      - uses: actions/checkout@v3.0.2
      - name: Generate action code
        if: github.event_name == 'pull_request'
        run: npm run deploy
      - uses: sersoft-gmbh/swifty-docs-action@master
        if: github.event_name == 'push'
        with:
          package-path: ${{env.INPUT_PACKAGE_PATH}}
          package-version : ${{env.INPUT_PACKAGE_VERSION}}
          output: ${{env.INPUT_OUTPUT}}
      - uses: './'
        if: github.event_name == 'pull_request'
        with:
          package-path: ${{env.INPUT_PACKAGE_PATH}}
          package-version : ${{env.INPUT_PACKAGE_VERSION}}
          output: ${{env.INPUT_OUTPUT}}
      - name: Check for SPM build
        run: test -d '__test__/TestProject/.build'
      - name: Check output path
        run: test -d '${{env.INPUT_OUTPUT}}'
      - name: Check index.html exists
        run: test -f '${{env.INPUT_OUTPUT}}/index.html'

  test-xcode:
    needs: deploy-action-code
    if: always() && !failure() && !cancelled()
    name: Test using Xcode
    env:
      INPUT_PACKAGE_PATH: __test__/TestProject
      INPUT_PACKAGE_VERSION: 1.0.0
      INPUT_USE_XCODEBUILD: true
      INPUT_XCODEBUILD_SCHEME: TestProject-Package
      INPUT_XCODEBUILD_DESTINATION: 'platform=macOS'
      INPUT_OUTPUT: docs
    runs-on: macos-latest
    steps:
      - uses: maxim-lobanov/setup-xcode@v1.4.1
        if: runner.os == 'macOS'
        with:
          xcode-version: ^13.0
      - name: Install dependencies
        if: github.event_name == 'pull_request'
        run: sudo npm i -g typescript @vercel/ncc
      - uses: actions/checkout@v3.0.2
      - name: Generate action code
        if: github.event_name == 'pull_request'
        run: npm run deploy
      - uses: sersoft-gmbh/swifty-docs-action@master
        if: github.event_name == 'push'
        with:
          package-path: ${{env.INPUT_PACKAGE_PATH}}
          package-version : ${{env.INPUT_PACKAGE_VERSION}}
          use-xcodebuild: ${{env.INPUT_USE_XCODEBUILD}}
          xcodebuild-scheme: ${{env.INPUT_XCODEBUILD_SCHEME}}
          xcodebuild-destination: ${{env.INPUT_XCODEBUILD_DESTINATION}}
          output: ${{env.INPUT_OUTPUT}}
      - uses: './'
        if: github.event_name == 'pull_request'
        with:
          package-path: ${{env.INPUT_PACKAGE_PATH}}
          package-version : ${{env.INPUT_PACKAGE_VERSION}}
          use-xcodebuild: ${{env.INPUT_USE_XCODEBUILD}}
          xcodebuild-scheme: ${{env.INPUT_XCODEBUILD_SCHEME}}
          xcodebuild-destination: ${{env.INPUT_XCODEBUILD_DESTINATION}}
          output: ${{env.INPUT_OUTPUT}}
      - name: Check for Xcode SPM build
        run: test -d '__test__/TestProject/.swiftpm'
      - name: Check output path
        run: test -d '${{env.INPUT_OUTPUT}}'
      - name: Check index.html exists
        run: test -f '${{env.INPUT_OUTPUT}}/index.html'

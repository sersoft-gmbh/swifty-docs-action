name: Tests

on:
  push:
    branches: [ master ]
    paths-ignore: [ 'dist/*.js' ]
  pull_request:
    branches: [ master ]

jobs:
  deploy-action-code:
    if: github.event_name == 'push'
    name: Deploy Action Code
    runs-on: ubuntu-latest
    steps:
      - name: Install depenedencies
        run: sudo npm i -g typescript @vercel/ncc
      - uses: actions/checkout@v2.3.4
        with:
          token: ${{secrets.BOT_TOKEN}}
      - name: Generate action code
        run: npm run deploy
      - name: Configure repository
        run: |
          git config user.name "${{secrets.BOT_USERNAME}}"
          git config user.email "${{secrets.BOT_USERNAME}}@users.noreply.github.com"
      - name: Commit changes
        run: |
          if ! git diff --exit-code --quiet; then
            git add .
            git commit -m "[AUTO] Update generated code"
            git push
          fi

  test-defaults:
    needs: deploy-action-code
    if: always() && !failure() && !cancelled()
    name: Test Default Inputs
    strategy:
      matrix:
        os: [ macos-latest, ubuntu-latest ]
    env:
      INPUT_SOURCE: __test__/TestProject
    runs-on: ${{matrix.os}}
    steps:
      - uses: maxim-lobanov/setup-xcode@v1.3.0
        if: runner.os == 'macOS'
        with:
          xcode-version: ^12.4
      - name: Install Swift
        if: runner.os == 'Linux'
        uses: sersoft-gmbh/swifty-linux-action@v1.3
        with:
          release-version: 5.4
          github-token: ${{secrets.GITHUB_TOKEN}}
      - name: Install dependencies
        if: github.event_name == 'pull_request'
        run: sudo npm i -g typescript @vercel/ncc
      - uses: actions/checkout@v2
      - name: Generate action code
        if: github.event_name == 'pull_request'
        run: npm run deploy
      - uses: sersoft-gmbh/swifty-docs-action@master
        if: github.event_name == 'push'
        with:
          source: ${{env.INPUT_SOURCE}}
      - uses: './'
        if: github.event_name == 'pull_request'
        with:
          source: ${{env.INPUT_SOURCE}}
      - name: Check for SPM build
        run: test -d __test__/TestProject/.build

  test-customized:
    needs: deploy-action-code
    if: always() && !failure() && !cancelled()
    name: Test Customized Inputs
    strategy:
      matrix:
        os: [ macos-latest, ubuntu-latest ]
        output: [ docs, otherDocs ]
        clean: [ true, false ]
        module-version: [ '1.2.3', '0.0.1' ]
    env:
      INPUT_SOURCE: __test__/TestProject
    runs-on: ${{matrix.os}}
    steps:
      - uses: maxim-lobanov/setup-xcode@v1.3.0
        if: runner.os == 'macOS'
        with:
          xcode-version: ^12.4
      - name: Install Swift
        if: runner.os == 'Linux'
        uses: sersoft-gmbh/SwiftyActions@v1.3
        with:
          release-version: 5.4
          github-token: ${{secrets.GITHUB_TOKEN}}
      - name: Install dependencies
        if: github.event_name == 'pull_request'
        run: sudo npm i -g typescript @vercel/ncc
      - uses: actions/checkout@v2
      - name: Generate action code
        if: github.event_name == 'pull_request'
        run: npm run deploy
      - name: Create output folder with dummy file
        run: ./__test__/bin/create_clean_test_file.sh ${{matrix.output}}
      - uses: sersoft-gmbh/swifty-docs-action@master
        if: github.event_name == 'push'
        with:
          source: ${{env.INPUT_SOURCE}}
          module-version: ${{matrix.module-version}}
          clean: ${{matrix.clean}}
          output: ${{matrix.output}}
      - uses: './'
        if: github.event_name == 'pull_request'
        with:
          source: ${{env.INPUT_SOURCE}}
          module-version: ${{matrix.module-version}}
          clean: ${{matrix.clean}}
          output: ${{matrix.output}}
      - name: Check for SPM build
        run: test -d __test__/TestProject/.build
      - name: Check output path
        run: test -d "${{matrix.output}}"
      - name: Check index.html exists
        run: test -f "${{matrix.output}}/index.html"
      - name: Check version in index.html
        run: cat "${{matrix.output}}/index.html" | grep -q '${{matrix.module-version}}'
      - name: Check clean
        run: ./__test__/bin/check_clean.sh ${{matrix.output}} ${{matrix.clean}}

  test-customized-xcode:
    needs: deploy-action-code
    if: always() && !failure() && !cancelled()
    name: Test Customized Inputs with Xcode
    strategy:
      matrix:
        output: [ docs, otherDocs ]
        clean: [ true, false ]
        module-version: [ '1.2.3', '0.0.1' ]
    env:
      INPUT_SOURCE: __test__/TestProject
      INPUT_XCODEBUILD_DESTINATION: 'platform=macOS'
    runs-on: macos-latest
    steps:
      - uses: maxim-lobanov/setup-xcode@v1.3.0
        if: runner.os == 'macOS'
        with:
          xcode-version: ^12.4
      - name: Install dependencies
        if: github.event_name == 'pull_request'
        run: sudo npm i -g typescript @vercel/ncc
      - uses: actions/checkout@v2
      - name: Generate action code
        if: github.event_name == 'pull_request'
        run: npm run deploy
      - name: Create output folder with dummy file
        run: ./__test__/bin/create_clean_test_file.sh ${{matrix.output}}
      - uses: sersoft-gmbh/swifty-docs-action@master
        if: github.event_name == 'push'
        with:
          source: ${{env.INPUT_SOURCE}}
          module-version: ${{matrix.module-version}}
          clean: ${{matrix.clean}}
          output: ${{matrix.output}}
          xcodebuild-destination: ${{env.INPUT_XCODEBUILD_DESTINATION}}
      - uses: './'
        if: github.event_name == 'pull_request'
        with:
          source: ${{env.INPUT_SOURCE}}
          module-version: ${{matrix.module-version}}
          clean: ${{matrix.clean}}
          output: ${{matrix.output}}
          xcodebuild-destination: ${{env.INPUT_XCODEBUILD_DESTINATION}}
      - name: Check for Xcode SPM build
        run: test -d __test__/TestProject/.swiftpm
      - name: Check output path
        run: test -d "${{matrix.output}}"
      - name: Check index.html exists
        run: test -f "${{matrix.output}}/index.html"
      - name: Check version in index.html
        run: cat "${{matrix.output}}/index.html" | grep -q '${{matrix.module-version}}'
      - name: Check clean
        run: ./__test__/bin/check_clean.sh ${{matrix.output}} ${{matrix.clean}}
